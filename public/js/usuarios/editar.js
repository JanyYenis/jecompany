/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/usuarios/editar.js":
/*!*****************************************!*\
  !*** ./resources/js/usuarios/editar.js ***!
  \*****************************************/
/***/ (() => {

eval("\n\nvar formEditarUsuario = \"#formEditarUsuario\";\n$(function () {\n  iniciarComponentes();\n  generalidades.validarFormulario(formEditarUsuario, enviarDatos);\n});\nvar iniciarComponentes = function iniciarComponentes() {\n  var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var input = document.querySelector(\"#tel\");\n  window.intlTelInput(input, {\n    utilsScript: \"https://cdn.jsdelivr.net/npm/intl-tel-input@18.1.1/build/js/utils.js\",\n    initialCountry: \"CO\"\n  });\n  generalidades.initTelefonoInput(\"\".concat(form, \" #telefonoWhatsapp\"));\n  var element = document.querySelector(\"#kt_stepper_example_clickable\");\n  var stepper = new KTStepper(element);\n  stepper.on(\"kt.stepper.click\", function (stepper) {\n    stepper.goTo(stepper.getClickedStepIndex()); // go to clicked step\n  });\n  stepper.on(\"kt.stepper.next\", function (stepper) {\n    stepper.goNext(); // go next step\n  });\n  stepper.on(\"kt.stepper.previous\", function (stepper) {\n    stepper.goPrevious(); // go previous step\n  });\n\n  // Email address\n  Inputmask({\n    mask: \"*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]\",\n    greedy: false,\n    onBeforePaste: function onBeforePaste(pastedValue, opts) {\n      pastedValue = pastedValue.toLowerCase();\n      return pastedValue.replace(\"mailto:\", \"\");\n    },\n    definitions: {\n      \"*\": {\n        validator: '[0-9A-Za-z!#$%&\"*+/=?^_`{|}~\\-]',\n        cardinality: 1,\n        casing: \"lower\"\n      }\n    }\n  }).mask(\"#inputEmail\");\n  $(\"#kt_datepicker_1\").flatpickr();\n  $('#kt_docs_repeater_basic').repeater({\n    initEmpty: false,\n    defaultValues: {\n      'text-input': 'foo'\n    },\n    show: function show() {\n      $(this).slideDown();\n    },\n    hide: function hide(deleteElement) {\n      $(this).slideUp(deleteElement);\n    }\n  });\n\n  // Format options\n  var optionFormat = function optionFormat(item) {\n    if (!item.id) {\n      return item.text;\n    }\n    var span = document.createElement('span');\n    var imgUrl = item.element.getAttribute('data-kt-select2-country');\n    var template = '';\n    template += '<img src=\"' + imgUrl + '\" class=\"rounded-circle h-40px w-40px me-4\" alt=\"image\"/>';\n    template += item.text;\n    span.innerHTML = template;\n    return $(span);\n  };\n\n  // Init Select2 --- more info: https://select2.org/\n  $('#selectPais').select2({\n    templateSelection: optionFormat,\n    templateResult: optionFormat\n  });\n  $(document).on('change', '#selectPais', function () {\n    if (this.value) {\n      $.ajax({\n        type: 'GET',\n        url: route('ciudades.buscar', {\n          'pais': this.value\n        }),\n        success: function success(response) {\n          if (response.estado == 'success') {\n            var _response$ciudades;\n            var ciudades = (_response$ciudades = response === null || response === void 0 ? void 0 : response.ciudades) !== null && _response$ciudades !== void 0 ? _response$ciudades : [];\n            var selectCiudad = $(\"#selectCiudad\");\n            selectCiudad.empty();\n            var opcion = new Option('', '', false, false);\n            selectCiudad.append(opcion);\n            ciudades.forEach(function (ciudad) {\n              var selected = false;\n              if (selectCiudad.attr('data-ciudad') && selectCiudad.attr('data-ciudad') == ciudad.id) {\n                selected = true;\n              }\n              selectCiudad.append(new Option(ciudad.text, ciudad.id, selected, selected));\n            });\n            $('#selectCiudad').attr('disabled', false);\n          }\n          generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n          // $('.divOpciones').removeClass('d-none');\n        }\n      });\n    } else {\n      $('#selectCiudad').attr('disabled', true);\n    }\n  });\n  $('#selectPais').trigger('change');\n};\nvar enviarDatos = function enviarDatos(form) {\n  var _inputTelefono$getSel, _inputTelefono$getSel2, _inputTelefono$getSel3, _inputTelefono$getSel4;\n  var formData = new FormData(document.getElementById(\"formEditarUsuario\"));\n  var inputTelefono = generalidades.darTelefonoInput(\"\".concat(formEditarUsuario, \" #tel\"));\n  var tel = inputTelefono === null || inputTelefono === void 0 ? void 0 : inputTelefono.getNumber(intlTelInputUtils.numberFormat.NATIONAL);\n  tel = tel.replace(/\\((\\w+)\\)/g, \"$1\");\n  tel = tel.replace(/-/g, \"\");\n  tel = tel.replace(/\\s/g, \"\");\n  var codigo = (_inputTelefono$getSel = inputTelefono === null || inputTelefono === void 0 || (_inputTelefono$getSel2 = inputTelefono.getSelectedCountryData()) === null || _inputTelefono$getSel2 === void 0 ? void 0 : _inputTelefono$getSel2.dialCode) !== null && _inputTelefono$getSel !== void 0 ? _inputTelefono$getSel : '';\n  var pais_tel = (_inputTelefono$getSel3 = inputTelefono === null || inputTelefono === void 0 || (_inputTelefono$getSel4 = inputTelefono.getSelectedCountryData()) === null || _inputTelefono$getSel4 === void 0 ? void 0 : _inputTelefono$getSel4.iso2) !== null && _inputTelefono$getSel3 !== void 0 ? _inputTelefono$getSel3 : '';\n  formData.set('telefono', tel);\n  formData.set('codigo_tel', codigo);\n  formData.set('pais_tel', pais_tel);\n  var imageInput = document.getElementById('avatarUsuario');\n  var imageFile = imageInput.files[0];\n  formData.set('image', imageFile);\n  var config = {\n    'method': 'PUT',\n    'headers': {\n      'Accept': generalidades.CONTENT_TYPE_JSON\n    },\n    'body': formData\n  };\n  var success = function success(response) {\n    if (formData.get('avatar')) {\n      $.ajax({\n        type: 'POST',\n        url: route('usuarios.guardarImagen'),\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        },\n        data: formData,\n        processData: false,\n        // Evita que jQuery procese los datos\n        contentType: false,\n        // Evita que jQuery establezca el encabezado 'Content-Type'\n        success: function success(response) {\n          if (response.estado == 'success') {\n            generalidades.ocultarValidaciones(formEditarUsuario);\n          }\n          generalidades.ocultarCargando(formEditarUsuario);\n          generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n          location.reload();\n        },\n        error: function error(response) {\n          generalidades.ocultarCargando(formEditarUsuario);\n          generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n          generalidades.mostrarValidaciones(formEditarUsuario, response.validaciones);\n        }\n      });\n    } else {\n      if (response.estado == 'success') {\n        generalidades.ocultarValidaciones(formEditarUsuario);\n      }\n      generalidades.ocultarCargando(formEditarUsuario);\n      generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n      location.reload();\n    }\n  };\n  var error = function error(response) {\n    generalidades.ocultarCargando(formEditarUsuario);\n    generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n    generalidades.mostrarValidaciones(formEditarUsuario, response.validaciones);\n  };\n  var rutaActualizar = route(\"usuarios.update\", {\n    \"usuario\": formData.get(\"id\")\n  });\n  generalidades.edit(rutaActualizar, config, success, error);\n  generalidades.mostrarCargando(formEditarUsuario);\n};\n$(document).on('click', '.btnCancelarDosFactores', function () {\n  Swal.fire({\n    text: '¿Está seguro que desea inhabilitar la autenticación de dos factores?',\n    icon: \"info\",\n    showCancelButton: true,\n    buttonsStyling: false,\n    confirmButtonText: \"Si\",\n    cancelButtonText: \"No\",\n    customClass: {\n      confirmButton: \"btn btn-primary\",\n      cancelButton: \"btn btn-active-light\"\n    }\n  }).then(function (result) {\n    if (result.value) {\n      cancelar();\n    }\n  });\n});\nvar cancelar = function cancelar() {\n  var formData = new FormData();\n  formData.append('google2fa_secret', null);\n  var config = {\n    'method': 'PUT',\n    'headers': {\n      'Accept': generalidades.CONTENT_TYPE_JSON\n    },\n    'body': formData\n  };\n  var success = function success(response) {\n    if (response.estado == 'success') {}\n    generalidades.ocultarCargando('body');\n    generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n    location.reload();\n  };\n  var error = function error(response) {\n    generalidades.ocultarCargando('body');\n    generalidades.toastrGenerico(response === null || response === void 0 ? void 0 : response.estado, response === null || response === void 0 ? void 0 : response.mensaje);\n  };\n  var rutaActualizar = route(\"usuarios.update\", {\n    \"usuario\": window.user\n  });\n  generalidades.edit(rutaActualizar, config, success, error);\n  generalidades.mostrarCargando('body');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/usuarios/editar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/usuarios/editar.js"]();
/******/ 	
/******/ })()
;