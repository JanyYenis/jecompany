/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/google2fa/principal.js":
/*!*********************************************!*\
  !*** ./resources/js/google2fa/principal.js ***!
  \*********************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTGoogle2FA = function () {\n  // Elements\n  var form;\n  var submitButton;\n  var validator;\n\n  // Handle form\n  var handleValidation = function handleValidation(e) {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'one_time_password': {\n          validators: {\n            notEmpty: {\n              message: 'El código es requerido'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          // comment to enable invalid state icons\n          eleValidClass: '' // comment to enable valid state icons\n        })\n      }\n    });\n  };\n  var handleSubmitDemo = function handleSubmitDemo(e) {\n    // Handle form submit\n    submitButton.addEventListener('click', function (e) {\n      // Prevent button default action\n      e.preventDefault();\n\n      // Validate form\n      validator.validate().then(function (status) {\n        if (status == 'Valid') {\n          // Show loading indication\n          submitButton.setAttribute('data-kt-indicator', 'on');\n\n          // Disable button to avoid multiple click\n          submitButton.disabled = true;\n\n          // Simulate ajax request\n          setTimeout(function () {\n            // Hide loading indication\n            submitButton.removeAttribute('data-kt-indicator');\n\n            // Enable button\n            submitButton.disabled = false;\n\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Excelente!\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            }).then(function (result) {\n              if (result.isConfirmed) {\n                form.querySelector('[name=\"email\"]').value = \"\";\n                form.querySelector('[name=\"password\"]').value = \"\";\n\n                //form.submit(); // submit form\n                var redirectUrl = form.getAttribute('data-kt-redirect-url');\n                if (redirectUrl) {\n                  location.href = redirectUrl;\n                }\n              }\n            });\n          }, 2000);\n        } else {\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n          Swal.fire({\n            text: \"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  var handleSubmitAjax = function handleSubmitAjax(e) {\n    // Handle form submit\n    submitButton.addEventListener('click', function (e) {\n      // Prevent button default action\n      e.preventDefault();\n\n      // Validate form\n      validator.validate().then(function (status) {\n        if (status == 'Valid') {\n          // Show loading indication\n          submitButton.setAttribute('data-kt-indicator', 'on');\n\n          // Disable button to avoid multiple click\n          submitButton.disabled = true;\n\n          // Check axios library docs: https://axios-http.com/docs/intro\n          axios.post(submitButton.closest('form').getAttribute('action'), new FormData(form)).then(function (response) {\n            if (response) {\n              form.reset();\n\n              // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n              Swal.fire({\n                text: \"Excelente!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n              var redirectUrl = form.getAttribute('data-kt-redirect-url');\n              if (redirectUrl) {\n                location.href = redirectUrl;\n              }\n            } else {\n              // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n              Swal.fire({\n                text: \"Lo sentimos, el email o password es incorrecto.\",\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n            }\n          })[\"catch\"](function (error) {\n            Swal.fire({\n              text: \"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }).then(function () {\n            // Hide loading indication\n            submitButton.removeAttribute('data-kt-indicator');\n\n            // Enable button\n            submitButton.disabled = false;\n          });\n        } else {\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n          Swal.fire({\n            text: \"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  var isValidUrl = function isValidUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Public functions\n  return {\n    // Initialization\n    init: function init() {\n      form = document.querySelector('#formGoogle2FA');\n      submitButton = document.querySelector('#btnGoogle2FA');\n      handleValidation();\n      if (isValidUrl(submitButton.closest('form').getAttribute('action'))) {\n        handleSubmitAjax(); // use for ajax submit\n      } else {\n        handleSubmitDemo(); // used for demo purposes only\n      }\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTGoogle2FA.init();\n  $('#pinwrapper').pinlogin({\n    fields: 6,\n    // default 5\n    placeholder: '*',\n    // default: '•'\n    hideinput: false,\n    // default: 'true'\n    complete: function complete(pin) {\n      $('#campoCodigo').val(pin);\n      $('#btnGoogle2FA').trigger('click');\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/google2fa/principal.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/google2fa/principal.js"]();
/******/ 	
/******/ })()
;